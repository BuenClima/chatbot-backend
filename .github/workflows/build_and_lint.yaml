name: 🚀 CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-and-build:
    name: 🧹 Lint and Build
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v2

      - name: 🐍 Set up Python 3.12
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      - name: Create Environment File
        run: |
          echo "DATABASE_URL=postgresql://test:test@localhost/test" >> .env
          echo "JWT_SECRET=test-token" >> .env
          echo "ALGORITHM=HS256" >> .env
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=15" >> .env

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint pytest pytest-cov python-dotenv  # Install python-dotenv for loading .env files
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: 🧹 Lint Code
        run: pylint app

  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-build
    permissions:
      pull-requests: write
      contents: read

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test -d test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v2

      - name: 🐍 Set up Python 3.12
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      - name: Create Environment File
        run: |
          echo "DATABASE_URL=postgresql://test:test@localhost/test" >> .env
          echo "JWT_SECRET=test-token" >> .env
          echo "ALGORITHM=HS256" >> .env
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=15" >> .env

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov python-dotenv  # Install python-dotenv for loading .env files
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

          - name: 🧪 Run Tests
          id: run-tests
          run: pytest --cov=app --cov-report=term-missing > pytest_output.txt

      - name: 📄 Upload Coverage Results
        uses: actions/upload-artifact@v2
        with:
          name: coverage-results
          path: pytest_output.txt

      - name: 💬 Comment Coverage Results
        uses: actions/github-script@v4
        with:
          script: |
            const fs = require('fs');
            const coverageResults = fs.readFileSync('pytest_output.txt', 'utf8');
            const issue_number = context.payload.pull_request.number;
            github.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Test Coverage Results\n\n${coverageResults}`
            });
